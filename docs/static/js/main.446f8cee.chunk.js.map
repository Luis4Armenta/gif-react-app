{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifReactApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","Error","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifReactApp","defaultCategories","categories","ReactDOM","render","document","getElementById"],"mappings":"iMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACE,sBAAMC,SAVc,SAACC,GACrBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAlBqB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACkCC,UAAWH,GAD7C,wEAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAeZM,GAfY,wCAiBb,IAAIO,MAAM,iCAAV,MAjBa,0DAAH,sDCGPC,EAAc,SAAC,GAAsB,IAAnBJ,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACpC,OACE,sBAAKe,UAAU,yCAAf,UACE,qBAAKC,IAAMhB,EAAMiB,IAAMP,IACvB,kCAAMA,EAAN,WCDOQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECHb,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAgB1C,OAVAC,qBAAW,WACTzB,EAAQC,GACLyB,MAAM,SAAAC,GACLH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAGd,CAACrB,IAEGsB,EDZ2BK,CAAc3B,GAAlCa,EADyB,EAC/BN,KAAcc,EADiB,EACjBA,QAEtB,OACE,eAAC,WAAD,WACE,qBAAIJ,UAAU,oCAAd,cAAoDjB,EAApD,OAEEqB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEMJ,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEfbiB,EAAc,SAAC,GAAgC,IAAD,IAA7BC,yBAA6B,MAAT,GAAS,IACrB3C,mBAAU2C,GADW,mBAClDC,EADkD,KACtC7C,EADsC,KAGzD,OACE,eAAC,WAAD,WACE,6CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEI6C,EAAWrB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCZpB+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.446f8cee.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handdleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handdleSubmit = (e) => {\n    e.preventDefault();\n    \n    if (inputValue.trim().length > 2 ) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  }\n  \n  return (\n    <form onSubmit={ handdleSubmit }>\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange={ handdleInputChange }\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async( category ) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=VNAsZhITQ4rdEUqiqgcHhL7HoZzHOkQS`\n\n  try {\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n      }\n    });\n\n    return gifs;\n  } catch (e) {\n    throw new Error('Error al obtener las imagenes.', e);\n  }\n}","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const GifGridItem = ( { title, url } ) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={ url } alt={ title } />\n      <p> { title } </p>\n    </div>\n  )\n}\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired\n}\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <Fragment>\n      <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\n\n      { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n      <div className=\"card-grid\">\n          {\n            images.map( img => (\n              <GifGridItem \n                key={ img.id }\n                { ...img }\n              />\n            ))\n          }\n      </div>\n    </Fragment>\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifs(category)\n      .then( imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      });\n  }, [category])\n\n  return state;\n}","import React, { Fragment, useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifReactApp = ({ defaultCategories = [] }) => {\n  const [categories, setCategories] = useState( defaultCategories );\n\n  return (\n    <Fragment>\n      <h2>GifReactApp</h2>\n      <AddCategory setCategories={ setCategories }/>\n      <hr />\n\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid \n              key={ category }\n              category={ category } \n            />\n          ))\n        }\n      </ol>\n    </Fragment>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifReactApp } from './GifReactApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifReactApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}